%Chance that legal move (X,Y,Z) will be taken according to player R based on their knowledge

1/P::thinks_move(R, does(X,Y)) :- role(R), thinks(R, legal(X,Y)), findall(A,thinks(R, legal(X, A)),Possibilities),length(Possibilities,P), P > 0.
role(1).
role(0).

init(closed(1)).
init(closed(2)).
init(closed(3)).
init(step(1)).

legal(0,hide_car(A)) :- ptrue(step(1)),ptrue(closed(A)).
thinks(R,legal(0,hide_car(A)) ) :- role(R), thinks(R,step(1)),thinks(R,closed(A)).
legal(0,open_door(A)) :- ptrue(step(2)),ptrue(closed(A)),not ptrue(car(A)),not ptrue(chosen(A)).
thinks(R,legal(0,open_door(A)) ) :- role(R), thinks(R,step(2)),thinks(R,closed(A)),not thinks(R,car(A)),not thinks(R,chosen(A)).
legal(0,noop) :- ptrue(step(3)).
thinks(R,legal(0,noop) ) :- role(R), thinks(R,step(3)).
legal(1,choose(A)) :- ptrue(step(1)),ptrue(closed(A)).
thinks(R,legal(1,choose(A)) ) :- role(R), thinks(R,step(1)),thinks(R,closed(A)).
legal(1,noop) :- ptrue(step(2)).
thinks(R,legal(1,noop) ) :- role(R), thinks(R,step(2)).
legal(1,noop) :- ptrue(step(3)).
thinks(R,legal(1,noop) ) :- role(R), thinks(R,step(3)).
legal(1,switch) :- ptrue(step(3)).
thinks(R,legal(1,switch) ) :- role(R), thinks(R,step(3)).

sees(1,A) :- does(0,open_door(A)).
thinks(R,sees(1,A) ) :- role(R), thinks(R,does(0,open_door(A))).
sees(1,A) :- ptrue(step(3)), ptrue(car(A)).
thinks(R,sees(1,A) ) :- role(R), thinks(R,step(3)), thinks(R,car(A)).

next(car(A)) :- does(0,hide_car(A)).
next(thinks(R,car(A)) ) :- role(R), thinks(R,does(0,hide_car(A))).
next(car(A)) :- ptrue(car(A)).
next(thinks(R,car(A)) ) :- role(R), thinks(R,car(A)).
next(closed(A)) :- ptrue(closed(A)),not does(0,open_door(A)).
next(thinks(R,closed(A)) ) :- role(R), thinks(R,closed(A)),not thinks(R,does(0,open_door(A))).
next(chosen(A)) :- does(1,choose(A)).
next(thinks(R,chosen(A)) ) :- role(R), thinks(R,does(1,choose(A))).
next(chosen(A)) :- ptrue(chosen(A)),not does(1,switch).
next(thinks(R,chosen(A)) ) :- role(R), thinks(R,chosen(A)),not thinks(R,does(1,switch)).
next(chosen(A)) :- does(1,switch),ptrue(closed(A)),not ptrue(chosen(A)).
next(thinks(R,chosen(A)) ) :- role(R), thinks(R,does(1,switch)),thinks(R,closed(A)),not thinks(R,chosen(A)).
next(step(2)) :- ptrue(step(1)).
next(thinks(R,step(2)) ) :- role(R), thinks(R,step(1)).
next(step(3)) :- ptrue(step(2)).
next(thinks(R,step(3)) ) :- role(R), thinks(R,step(2)).
next(step(4)) :- ptrue(step(3)).
next(thinks(R,step(4)) ) :- role(R), thinks(R,step(3)).

terminal :- ptrue(step(4)).
thinks(R,terminal ) :- role(R), thinks(R,step(4)).

goal(1,100) :- ptrue(chosen(A)), ptrue(car(A)).
thinks(R,goal(1,100) ) :- role(R), thinks(R,chosen(A)), thinks(R,car(A)).
goal(1, 0) :- ptrue(chosen(A)), not ptrue(car(A)).
thinks(R,goal(1, 0) ) :- role(R), thinks(R,chosen(A)), not thinks(R,car(A)).
goal(random,0).
