%The following problog program models the monty hall problem in a way that incorporates some GDL-III concepts
role(1). role(0).

%The following 3 predicates are public knowledge at step 1 
init(closed(1)). 
init(closed(2)).
init(closed(3)).
init(step(1)).

%Chance that legal move (X,Y,Z) will be taken according to player R based on their knowledge
1/P::thinks_move(R, does(X,Y)) :-
    role(R),
    thinks(R, legal(X,Y)),
    findall(A,thinks(R, legal(X, A)),Possibilities),
    length(Possibilities,P), 
    P > 0.


%Legal(player, action, args)
legal(0, hide_car(X)) :- ptrue(step(1)),ptrue(closed(X)).
thinks(R, legal(0, hide_car(X))) :- role(R), thinks(R, step(1)), thinks(R, closed(X)).

legal(0, open_door(X)) :- ptrue(step(2)),ptrue(closed(X)),not ptrue(car(X)),not ptrue(chosen(X)).
thinks(R, legal(0, open_door(X))) :- 
    role(R), 
    thinks(R, step(2)),
    thinks(R, closed(X)),
    not thinks(R, car(X)),
    not thinks(R, chosen(X)).

legal(0, noop) :- ptrue(step(3)).
thinks(R, legal(0, noop)) :- role(R), thinks(R, step(3)).

legal(1,choose(X)) :- ptrue(step(1)),ptrue(closed(X)).
thinks(R, legal(1, choose(X))) :- role(R), thinks(R, step(1)), thinks(R, closed(X)).

legal(1, noop) :- ptrue(step(2)).
thinks(R, legal(1, noop)) :- role(R), thinks(R, step(2)).

legal(1, noop) :- ptrue(step(3)).
thinks(R, legal(1, noop)) :- role(R), thinks(R, step(3)).

legal(1,switch) :- ptrue(step(3)).
thinks(R, legal(1,switch)) :- role(R), thinks(R, step(3)).

sees(1,X) :- does(0,open_door(X)).
thinks(1, sees(1,X)) :- thinks(1, does(0,open_door(X))).

sees(1,X) :- ptrue(step(3)), ptrue(car(X)).
thinks(1, sees(1,X)) :- thinks(1, step(3)), thinks(1, car(X)).

next(car(X)) :- does(0,hide_car(X)).
next(thinks(R, car(Z))) :- role(R), thinks(R, does(0,hide_car(Z))).

next(car(X)) :- ptrue(car(X)).
next(thinks(R, car(Z))) :- role(R), thinks(R, car(Z)).

next(closed(X)) :- ptrue(closed(X)),not does(0,open_door(X)).
next(thinks(R, closed(Z))) :- role(R), thinks(R, closed(Z)), not thinks(R, does(0,open_door(Z))).

next(chosen(X)) :- does(1,choose(X)).
next(thinks(R, chosen(Z))) :- role(R), thinks(R, does(1,choose(Z))).


next(chosen(X)) :- ptrue(chosen(X)),not does(1,switch).
next(thinks(R, chosen(Z))) :- role(R), thinks(R, chosen(Z)),not thinks(R, does(1,switch)).

next(chosen(X)) :- does(1,switch),ptrue(closed(X)),not ptrue(chosen(X)).
next(thinks(R, chosen(Z))) :- role(R), thinks(R, does(1,switch)),thinks(R, closed(Z)),not thinks(R, chosen(Z)).


next(step(2)) :- ptrue(step(1)).
next(thinks(R, step(2))) :- role(R), thinks(R, step(1)).

next(step(3)) :- ptrue(step(2)).
next(thinks(R, step(3))) :- role(R), thinks(R, step(2)).

next(step(4)) :- ptrue(step(3)).
next(thinks(R, step(4))) :- role(R), thinks(R, step(3)).

terminal :- ptrue(step(4)).
thinks(R, terminal) :- role(R), thinks(R, step(4)).

goal(1,100) :- ptrue(chosen(X)), ptrue(car(X)).
thinks(R, goal(1,100)) :- role(R), thinks(R, car(Z)), thinks(R, chosen(Z)).

goal(1, 0) :- ptrue(chosen(X)), not ptrue(car(X)).
thinks(R, goal(1,0)) :- role(R), not thinks(R, car(Z)), thinks(R, chosen(Z)).

goal(0,0).
thinks(R, goal(0,0)) :- role(R).