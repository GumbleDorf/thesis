%Chance that legal move (X,Y,Z) will be taken according to player R based on their knowledge

1/P::thinks_move(R, does(X,Y)) :- role(R), thinks(R, legal(X,Y)), findall(A,thinks(R, legal(X, A)),Possibilities),length(Possibilities,P), P > 0.
role(1).
role(0).
knows(0,0).
pnumber(1).
pnumber(2).
pnumber(3).
pnumber(4).
pnumber(5).
pnumber(6).
pnumber(7).
pnumber(8).
pnumber(9).
pnumber(10).
pnumber(11).
pnumber(12).
pnumber(13).
pnumber(14).
pnumber(15).
pnumber(16).
pnumber(17).
pnumber(18).
pnumber(19).
pnumber(20).
pnumber(21).
pnumber(22).
pnumber(23).
pnumber(24).
pnumber(25).
pnumber(26).
pnumber(27).
pnumber(28).
pnumber(29).
pnumber(30).
pnumber(31).
pnumber(32).
psucc(0,1).
psucc(1,2).
psucc(2,3).
psucc(3,4).
psucc(4,5).
psucc(5,6).
psucc(6,7).
psucc(7,8).
psucc(8,9).
psucc(9,10).
psucc(10,11).
psucc(11,12).
psucc(12,13).
psucc(13,14).
psucc(14,15).
psucc(15,16).
psucc(16,17).
psucc(17,18).
psucc(18,19).
psucc(19,20).
psucc(20,21).
psucc(21,22).
psucc(22,23).
psucc(23,24).
psucc(24,25).
psucc(25,26).
psucc(26,27).
psucc(27,28).
psucc(28,29).
psucc(29,30).
psucc(30,31).
psucc(31,32).
less(A,Aa) :- psucc(A,Aa).
less(A, Aa) :- psucc(A,Aaaa), less(Aaaa,Aa).
init(step(0)).

legal(0, choose(A)) :- pnumber(A), ptrue(step(0)).
thinks(R,legal(0, choose(A)) ) :- role(R), pnumber(A), thinks(R,step(0)).
legal(0,noop) :- not(ptrue(step(0))).
thinks(R,legal(0,noop) ) :- role(R), not(thinks(R,step(0))).

legal(1,noop) :- ptrue(step(0)).
thinks(R,legal(1,noop) ) :- role(R), thinks(R,step(0)).
legal(1,ask_if_less(A)) :- pnumber(A), not(ptrue(step(0))).
thinks(R,legal(1,ask_if_less(A)) ) :- role(R), pnumber(A), not(thinks(R,step(0))).
sees(1,yes) :- does(1, ask_if_less(A)), ptrue(secret(Aa)), less(Aa,A).
thinks(R,sees(1,yes) ) :- role(R), thinks(R,does(1, ask_if_less(A))), thinks(R,secret(Aa)), less(Aa,A).

next(secret(A)) :- does(0, choose(A)).
next(thinks(R,secret(A)) ) :- role(R), thinks(R,does(0, choose(A))).
next(secret(A)) :- ptrue(secret(A)).
next(thinks(R,secret(A)) ) :- role(R), thinks(R,secret(A)).
next(step(A)) :- ptrue(step(Aa)), psucc(Aa,A).
next(thinks(R,step(A)) ) :- role(R), thinks(R,step(Aa)), psucc(Aa,A).

num(A) :- ptrue(secret(A)).
knows_the_pnumber(A) :- role(A), knows(A, num(Aaaa)).
terminal :- knows_the_pnumber(1).
terminal :- ptrue(step(12)).
goal(1, 100) :- knows_the_pnumber(1).
goal(1, 0) :- not(knows_the_pnumber(1)).
