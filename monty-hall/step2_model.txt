%Legality of the noop on step 2, no knowledge gained from this action
legal(noop(candidate, step(2))) :- step(2).
%----------------------------------------------------------------
%Legality and effects of revealing a door
legal(reveal_door(random, door(X), step(2))) :- 
    door(X),
    not car(door(X), step(_)),
    not door_chosen(candidate, door(X), step(_)), 
    step(2).

knows(candidate,not car(door(X),step(Z))) :-
    reveal_door(random, door(X), step(Y)),
    plus(Y,1,Z).

%The legality of this move depends on information that the candidate does not have
%Therefore, we construct a knowledge base of what it believes to be legal
%THIS BIT IS AN ISSUE, I DON'T KNOW HOW I WOULD REPRESENT THIS IN GDL-III OR DERIVE A TRANSLATION FROM A SPEC
1/P::knows(candidate,given(legal(reveal_door(random, door(X), step(2)))),door_chosen(Y), car(Z)) :-
    possible(knows(candidate,car(door(Z),step(2)))),
    door_chosen(candidate,door(Y), step(_)),
    notSameDoor(X,Y,Z),
    findall(A, notSameDoor(A,Y,Z), PossibleDoors),
    length(PossibleDoors, P),
    P > 0.

notSameDoor(X,Y,Z) :-
    door(X),
    door(Y),
    door(Z),
    X \= Y,
    X \= Z.

% This ends up with a non-normalised result of 1/6 don't switch, 1/3 switch, should use different approach
knows(candidate,car(door(Z),step(3))) :-
    knows(candidate,not car(door(X),step(3))),
    knows(candidate,car(door(Z),step(2))),
    knows(candidate,given(legal(reveal_door(random, door(X), step(2)))),door_chosen(_), car(Z)).